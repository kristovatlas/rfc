<pre>
  BIP:     LI01
  Title:   Lexicographical Indexing of Transaction Inputs and Outputs
  Authors: Kristov Atlas <kristov [at] openbitcoinprivacyproject.org>
  Status:  Draft
  Type:    Informational
  Created: 2015-06-05
</pre>

==Abstract==

Currently there is no standard for bitcoin wallet clients when ordering transaction inputs and outputs. As a result, wallet clients often have a discernible blockchain fingerprint, and can leak private information about their users. By contrast, a standard for non-deterministic sorting could be difficult to audit. This document proposes deterministic lexicographical sorting, using hashes of previous transactions and output indices to sort transaction inputs, as well as value and locking scripts to sort transaction outputs.

==Copyright==

This BIP is in the public domain.

==Motivation==

Currently, there is no clear standard for how wallet clients ought to order transaction inputs and outputs. Since wallet clients are left to their own devices to determine this ordering, they often leak information about their users’ finances. For example, a wallet client might naively order inputs based on when addresses were added to a wallet by the user through importing or random generation. Many wallets will place spending outputs first and change outputs second, leaking information about both the sender and receiver’s finances to passive blockchain observers. Such information should remain private not only for the benefit of consumers, but in higher order financial systems must be kept secret to prevent fraud. A researcher recently demonstrated this principle when he detected that Bitstamp leaked information when creating exchange transactions, enabling potential espionage among traders. [1]

One way to address these privacy weaknesses is by randomly ordering inputs and outputs. [2] After all, the order of inputs and outputs does not impact the function of the transaction they belong to, making random sorting viable. Unfortunately, it can be difficult to prove that this sorting process is genuinely randomly sorted based on code or run-time analysis, especially if the software is closed source. A malicious software developer can abuse the ordering of inputs and outputs as a side channel of leaking information. For example, if an attacker can patch a victim’s HD wallet client to order inputs and outputs based on the bits of a master private key, then the attacker can eventually steal all of the victim’s funds by monitoring the blockchain. Non-deterministic methods of sorting are difficult to audit because they are not repeatable.

The lack of standardization between wallet clients when ordering inputs and outputs can yield predictable quirks that characterize particular wallet clients or services. Such quirks create unique fingerprints that a privacy attacker can employ through simple passive blockchain observation.

The solution is to create an algorithm for sorting transaction inputs and outputs that is deterministic. Since it is deterministic, it should also be unambiguous -- that is, given a particular transaction, the proper order of inputs and outputs should be obvious. To make this standard as widely applicable as possible, it should rely on information that is downloaded by both full nodes (with or without typical efficiency techniques such as pruning) and SPV nodes. In order to ensure that it does not leak confidential data, it must rely on information that is publicly accessible through the blockchain. The use of public blockchain information also allows a transaction to be sorted even when it is a multi-party transaction, such as in the example of a CoinJoin.

==Specification==

===Lexicographical Sorting===

Ordering of inputs will rely on the output of sorting functions. These functions can be defined as taking two inputs or two outputs as parameters and returning their appropriate ordering with respect to each other. 

Hex strings must be sorted with an algorithm that produces the same output as the following comparison algorithm:

 <nowiki>#returns -1 if str1 is lesser, 1 if str1 is greater, and 0 if equal
 def string_cmp(str1, str2):
    pos = 0
    while (pos < len(str1) and pos < len(str2)):
        cmp = character_cmp(str1[pos], str2[pos])
        if (cmp != 0):
            return cmp
        pos = pos + 1
    #the shorter string will be ordered first
    if (len(str1) < len(str2)):
        return -1
    elif (len(str1) > len(str2)):
        return 1
    else:
        return 0

 def character_cmp(chr1, chr2):
    values = {
        '0': 0,
        '1': 1,
        '2': 2,
        '3': 3,
        '4': 4,
        '5': 5,
        '6': 6,
        '7': 7,
        '8': 8,
        '9': 9,
        'a': 10,
        'b': 11,
        'c': 12,
        'd': 13,
        'e': 14,
        'f': 15}
    if (values[chr1] < values[chr2]):
        return -1
    elif (values[chr1] > values[chr2]):
        return 1
    else:
        return 0
 </nowiki>

Byte arrays must be sorted with an algorithm that produces the same output as the following comparison algorithm:

 <nowiki>#returns -1 if barr1 is lesser, 1 if barr1 is greater, and 0 if equal
 def bytearr_cmp(barr1, barr2):
    pos = 0
    while (pos < len(barr1) and pos < len(barr2)):
        if (barr1[pos] < barr2[pos]):
            return -1;
        elif (barr1[pos] > barr2[pos]):
            return 1;
        pos = pos + 1
    #the shorter array will be ordered first
    if (len(barr1) < len(barr2)):
        return -1
    elif (len(barr1) > len(barr2)):
        return 1
    else:
        return 0
 </nowiki>

N.B. These comparison algorithms do not need to operate in constant time since they are not processing sensitive data.

===Transaction Inputs===

Transaction inputs are defined by the hash of a previous transaction, the output index of of a UTXO from that previous transaction, the size of an unlocking script, the unlocking script, and a sequence number currently set to 0xFFFFFFFF. [3] For sorting inputs, the hash of the previous transaction and the output index within that transaction are sufficient for sorting purposes; each transaction hash has an extremely high probability of being unique in the blockchain -- this is enforced for coinbase transactions by BIP30 -- and output indices within a transaction are unique. For the sake of efficiency, transaction hashes should be compared first before output indices, since output indices from different transactions are often equivalent, while all bytes of the transaction hash are effectively random variables.

Hashes of previous transactions must be sorted according to the string_cmp() function above. In the event of a tie between two transaction hashes, output indices will be compared based on their integer value. A further tie is extremely improbable for the aforementioned reasons.

Because the hash of previous transactions and output indices must be included in a signed transaction, wallet clients capable of signing transactions will necessarily have access to this data.

Transaction malleability will not negatively impact the correctness of this process. Even if a wallet client follows this process using unconfirmed UTXOs as inputs and an attacker changes modifies the blockchain’s record of the hash of the previous transaction, the wallet client will include the invalidated previous transaction hash in its input data, and will still correctly sort with respect to that invalidated hash.

===Transaction Outputs===

Transaction outputs are defined by their locking script and amount. [3] For sorting purposes, we will consider a locking script in its raw, little-endian byte array representation, and a bitcoin amount in terms of unsigned, 8-byte integer number of satoshis.

For the sake of efficiency, amounts will be considered first for sorting, since they contain fewer bytes of information (7 bytes) compared to a standard P2PKH locking script (800 bytes). [4] When the values are tied the locking script is then considered. In the event of a tie between locking scripts, sorting is irrelevant since the outputs are exactly equivalent.

===Handling Input/Output Dependencies===

Some uncommon forms of transactions create an ordering dependency between inputs and outputs of a transaction. Wallets forming these transactions should first sort inputs according to the methodology outlined in section “Transaction Inputs” of this BIP. Then, they should fix the output indices that depend on the input order, and sort the remaining outputs around them. If there are no outputs that do not depend on input order, then all outputs will simply be ordered based on the expected scheme. The following are the known cases of input/output dependency that must be handled specially:

* SIGHASH_SINGLE hash type. [5] Clients seeking to verify LI01 compliance for a transaction must inspect the last byte of the scriptSig of each input to determine the signature hash type. In the case of SIGHASH_SINGLE (0x03) for input “n”, the verifier should expect  that output “n” will be fixed when considering output ordering.


==Backwards Compatibility==

The use of LI01 transactions does not require a hard adjustment to the core bitcoin consensus protocol.  Individual wallets and services can integrate LI01 ordering into their products without any impact on any other participant in the bitcoin network.

Wallets, services, and miners may want to become aware of the deterministic ordering and provide that information as part of their display of blockchain information. Miners may also prefer to include LI01 compliant transactions into a block, or as an additional preference rule when confronted with conflicting transaction spends (such as replace by fee or a double spend attack).

When v4 or later transactions are standardized, LI01 should be examined as a candidate for standardization.

==References==

* [[https://bitcoinmagazine.com/20273/bitstamp-exchange-activity-trackable-due-multisig-wallet-implementation/|1: Bitstamp Info Leak]]
* [[https://github.com/OpenBitcoinPrivacyProject/wallet-ratings/blob/master/2015-1/criteria.md|2: OBPP Random Indexing as Countermeasure]]
* [[https://github.com/aantonop/bitcoinbook/blob/develop/ch05.asciidoc|3: Mastering Bitcoin]]
* [[https://en.bitcoin.it/wiki/Script|4: Bitcoin Wiki on Script]]
* [[https://en.bitcoin.it/wiki/OP_CHECKSIG#Procedure_for_Hashtype_SIGHASH_SINGLE|5: Bitcoin Wiki on SIGHASH_SINGLE]]

==Acknowledgements==

Danno Ferrin &lt;danno [at] numisight.com&gt;, Sergio Demian Lerner &lt;sergiolerner [at] certimix.com&gt;, and Justus Ranvier &lt;justus [at] openbitcoinprivacyproject.org &gt; contributed to the design and motivations for this BIP.
